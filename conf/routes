# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                       Application.index

GET         /documentation/?                        Documentation.index
GET         /documentation/images/{name}            Documentation.image
GET         /documentation/{id}                     Documentation.page
GET         /documentation/{category}/{id}          Documentation.page


# Form-based authentication
GET         /login                                  Authentication.login
POST        /login                                  Authentication.authenticate
GET         /logout                                 Authentication.logout

# OAuth2
GET         /authorize                              OAuth2Authenticator.authenticate
GET         /token                                  OAuth2TokenEndpoint.token

# Backwards compatibility with the old services module
GET         /services/                                                       Services.index
GET         /services/api/solr/select                                        Services.solrSearchProxy
GET         /services/api/search                                             Services.index
GET         /services/api/open-search                                        Services.index
GET         /services/api/open-search.xml                                    Services.index
GET         /services/oai-pmh                                                Services.oaipmh
GET         /services/oai-pmh/{accessKey}                                    Services.oaipmhSecured
GET         /services/dataset                                                SipCreatorEndPoint.listAll
GET         /services/dataset/{dataSetSpec}/{command}                        SipCreatorEndPoint.indexingControl
POST        /services/dataset/submit/{dataSetSpec}/{fileType}/{fileName}     SipCreatorEndPoint.acceptFile
POST        /services/dataset/fetch/{dataSetSpec}-sip.zip                    SipCreatorEndPoint.fetchSIP
GET         /services/administrator/dataset                                  SipCreatorEndPoint.secureListAll
GET         /services/administrator/dataset/{dataSetSpec}/{command}          SipCreatorEndPoint.secureIndexingControl

# Backwards compatibility with the old portal module
GET        /portal/                                                          Portal.index

# Search results
GET        /search                                                           Search.index

# User registration
GET        /registration                                                     Registration.index
POST       /registration/register                                            Registration.register
GET        /registration/captcha                                             Registration.captcha
GET        /registration/activate/{activationToken}                          Registration.activate
GET        /registration/lostPassword                                        Registration.lostPassword
POST       /registration/resetPasswordEmail                                  Registration.resetPasswordEmail
GET        /registration/resetPassword/{resetPasswordToken}                  Registration.resetPassword
POST       /registration/newPassword                                         Registration.newPassword

# Delving URL scheme

GET         /{user}/?                                                        Users.index

GET         /{user}/profile                                                  Profiles.index

GET         /{user}/label                                                    Labels.list
GET         /{user}/label/{label}                                            Labels.label

GET         /{user}/collection                                               Collections.list
GET         /{user}/collection/writeable/search                              Collections.listWriteableAsTokens
GET         /{user}/collection/add                                           user.Collections.collectionUpdate
GET         /{user}/collection/update/{id}                                   user.Collections.collectionUpdate
POST        /{user}/collection/submit                                        user.Collections.collectionSubmit
GET         /{user}/collection/load/{id}?                                    Collections.load
GET         /{user}/collection/{id}                                          Collections.view

GET         /{user}/object                                                   DObjects.list
GET         /{user}/object/add                                               user.DObjects.objectUpdate
GET         /{user}/object/{id}                                              DObjects.view
GET         /{user}/object/update/{id}                                       user.DObjects.objectUpdate
POST        /{user}/object/submit                                            user.DObjects.objectSubmit
GET         /{user}/object/load/{id}?                                        DObjects.load

GET         /{user}/story                                                    Stories.list
GET         /{user}/story/add                                                Stories.add
GET         /{user}/story/{story}                                            Stories.story

GET         /{user}/repositories/writeable/search                            Repositories.listWriteableAsTokens

GET         /{user}/admin/?                                                  user.Admin.index
GET         /{user}/admin/groups                                             user.Admin.groupList
GET         /{user}/admin/groups/new                                         user.Admin.groupUpdate
GET         /{user}/admin/groups/update/{name}                               user.Admin.groupUpdate
POST        /{user}/admin/groups/submit                                      user.Admin.groupSubmit
GET         /{user}/admin/groups/load/{name}?                                user.Admin.groupLoad

GET         /{user}/dataset                                                  DataSets.list
GET         /{user}/dataset/{spec}                                           DataSets.view
GET         /{user}/dataset/{spec}/facts                                     DataSets.facts
POST        /{user}/dataset/{spec}/facts                                     user.DataSets.factsSubmit
GET         /{user}/dataset/{spec}/facts/update                              user.DataSets.factsUpdate

GET         /{user}/dataset/{dataSetSpec}/{command}                          SipCreatorEndPoint.indexingControl
POST        /{user}/dataset/submit/{dataSetSpec}/{fileType}/{fileName}       SipCreatorEndPoint.acceptFile
POST        /{user}/dataset/fetch/{dataSetSpec}-sip.zip                      SipCreatorEndPoint.fetchSIP
GET         /{user}/admin/dataset                                            SipCreatorEndPoint.secureListAll
GET         /{user}/admin/dataset/{dataSetSpec}/{command}                    SipCreatorEndPoint.secureIndexingControl

GET         /users/search                                                    Users.listAsTokens

# Portal Administration
GET        /admin/themes                                                     admin.Themes.index
GET        /admin/themes/list                                                admin.Themes.list
POST       /admin/themes/reload                                              admin.Themes.reload

# Image Cache and Viewer
GET        /services/image                                                   Images.image
GET        /services/imageView/{image}                                       Images.view
GET        /fcgi-bin/iipsrv.fcgi                                             Images.iipsrv

# Image Upload
GET         /services/upload                                                 ImageUpload.upload
POST        /services/uploadFile                                             ImageUpload.uploadFile

# Ignore favicon requests
GET         /favicon.ico                                                     404

# Map static resources from the /app/public folder to the /public path
GET         /public/                                                         staticDir:public


# Catch all
*           /{controller}/{action}                                           {controller}.{action}
