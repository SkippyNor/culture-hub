# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#GET         /public/themes/{theme}/info.conf                                 404
#GET         /public/themes/{theme}/{<.*>relativePath}                        Asset.serveTheme

#GET         /robots.txt                                                      staticFile:public/robots.txt

#GET         /asset                                                           Asset.get

# Home page
GET     /                                                                           controllers.Application.index

# Site page
#GET         /page/{key}                                                      Application.page


# Form-based authentication
GET        /login                                                                  controllers.Authentication.login
POST       /login                                                                  controllers.Authentication.authenticate
GET        /logout                                                                 controllers.Authentication.logout

# OAuth2
GET        /authorize                                                              controllers.OAuth2Authenticator.authenticate
GET        /token                                                                  controllers.OAuth2TokenEndpoint.token

# Image viewer for high-resolution images
#GET        /image/viewer                                                     Images.view
#GET        /fcgi-bin/iipsrv.fcgi                                             Images.iipsrv
#GET        /deepzoom/?                                                       Images.iipsrv

# Image Upload - with authentication
#POST       /file/upload/{uid}                                                user.FileUpload.uploadFile
#DELETE     /file/{id}                                                        user.FileUpload.deleteFile


# Delving object Server module
#*          /                                                                 module:dos

# Backwards compatibility with the old services module
#GET         /services/                                                       Services.index
#GET          /services/api/solr/select                                        controllers.Services.solrSearchProxy
#GET          /services/api/search                                             controllers.Services.searchApi
#GET         /services/api/{spec}:{id}                                        controllers.Services.retrieveRecord
#GET         /services/api/open-search                                        controllers.Services.index
#GET         /services/api/open-search.xml                                    controllers.Services.index
#GET          /services/oai-pmh                                                controllers.Services.oaipmh
#GET         /services/oai-pmh/{accessKey}                                    controllers.Services.oaipmhSecured

# Custom Controllers and Functionality for customers
# TODO maybe later change this to an action based mechanism
#GET         /services/api/itin                                               custom.ItinEndPoint.search
#POST        /services/api/itin                                               custom.ItinEndPoint.store


# User registration
GET        /registration                                                           controllers.Registration.index
POST       /registration/register                                                  controllers.Registration.register
GET        /registration/captcha/:id                                               controllers.Registration.captcha(id)
GET        /registration/activate/:activationToken                                 controllers.Registration.activate(activationToken)
GET        /registration/lostPassword                                              controllers.Registration.lostPassword
POST       /registration/resetPasswordEmail                                        controllers.Registration.resetPasswordEmail
GET        /registration/resetPassword/:resetPasswordToken                         controllers.Registration.resetPassword(resetPasswordToken)
POST       /registration/newPassword/:resetPasswordToken                           controllers.Registration.newPassword(resetPasswordToken)



# Enrichment lookups

GET         /enrichment/place/search                                               controllers.ws.Places.find

# Delving URL scheme

GET          /users                                                           controllers.Users.list(query: String ?= "", page: Int ?= 1)
GET          /users/search                                                    controllers.Users.listAsTokens(q: String ?= "", orgId: String ?= null)
#GET         /collections/?                                                   Collections.list
#GET         /objects/?                                                       DObjects.list
#GET         /heritageObjects/?                                               HeritageObjects.list
#GET         /stories/?                                                       Stories.list

#GET         /search                                                          Search.index

GET          /:user                                                           controllers.Profile.profile(user)

#POST        /{user}/block                                                    admin.NodeAdmin.blockUser

#GET         /{user}/label/search                                             Links.listFreeTextAsTokens

#POST        /{user}/link/{linkType}/{toType}/{toId}                          user.Links.add(fromType:'user')
#DELETE      /{user}/link/{linkType}/{link}                                   user.Links.removeById(fromType:'user')

#GET         /{user}/object                                                   DObjects.list
#GET         /{user}/object/add                                               user.DObjects.dobject
#GET         /{user}/object/{id}/update                                       user.DObjects.dobject
#POST        /{user}/object/{fromId}/link/{linkType}/{toType}/{toId}          user.Links.add(fromType:'object')
#DELETE      /{user}/object/{fromId}/link/{linkType}/{link}                   user.Links.removeById(fromType:'object')
#POST        /{user}/object/submit                                            user.DObjects.objectSubmit
#DELETE      /{user}/object/{id}/remove                                       user.DObjects.remove
#POST        /{user}/object/{id}/block                                        admin.NodeAdmin.blockDObject
#GET         /{user}/object/{id}                                              DObjects.dobject

#GET         /{orgId}/object/{spec}/{recordId}/overlay                          Search.record(overlay:'true')
#POST        /{orgId}/object/{spec}/{recordId}/link/{linkType}/{toType}/{toId}  user.Links.add(fromType:'mdr')
#DELETE      /{orgId}/object/{spec}/{recordId}/link/{linkType}/{toType}/{toId}  user.Links.remove(fromType:'mdr')
#GET         /{orgId}/object/{spec}/{recordId}                                  Search.record

#GET         /{user}/sip-creator.jnlp                                         organization.SipCreator.jnlp

#GET         /{user}/collection                                               Collections.list
#GET         /{user}/collection/{id}/objects                                  Collections.listObjects
#GET         /{user}/collection/{collectionId}/object/{id}                    DObjects.dobject
#GET         /{user}/collection/add                                           user.Collections.collection
#GET         /{user}/collection/{id}/update                                   user.Collections.collection
#POST        /{user}/collection/{fromId}/link/{linkType}/{toType}/{toId}      user.Links.add(fromType:'collection')
#DELETE      /{user}/collection/{fromId}/link/{linkType}/{link}               user.Links.removeById(fromType:'collection')
#POST        /{user}/collection/submit                                        user.Collections.collectionSubmit
#DELETE      /{user}/collection/{id}/remove                                   user.Collections.remove
#POST        /{user}/collection/{id}/block                                    admin.NodeAdmin.blockUserCollection
#GET         /{user}/collection/{id}                                          Collections.collection

#GET         /{user}/story                                                    Stories.list
#GET         /{user}/story/add                                                user.Stories.story
#GET         /{user}/story/{id}/update                                        user.Stories.story
#POST        /{user}/story/{fromId}/link/{linkType}/{toType}/{toId}           user.Links.add(fromType:'story')
#DELETE      /{user}/story/{fromId}/link/{linkType}/{link}                    user.Links.removeById(fromType:'story')
#POST        /{user}/story/submit                                             user.Stories.storySubmit
#DELETE      /{user}/story/{id}/remove                                        user.Stories.remove
#POST        /{user}/story/{id}/block                                         admin.NodeAdmin.blockStory
#GET         /{user}/story/{id}                                               Stories.story
#GET         /{user}/story/{id}/read                                          Stories.read


#GET         /{user}/admin/?                                                  user.Admin.index
#GET         /{user}/admin/profile/update                                     user.Admin.profile
#POST        /{user}/admin/profile                                            user.Admin.profileSubmit

# Organizations
GET         /organizations/:orgId                                             controllers.organization.Organizations.index(orgId)
GET         /organizations/:orgId/search                                      controllers.Services.searchApi(orgId: String)
GET         /organizations/:orgId/oai-pmh                                     controllers.Services.oaipmh(orgId: String)
GET         /organizations/:orgId/admin                                       controllers.organization.Admin.index(orgId)
POST        /organizations/:orgId/admin/users/add                             controllers.organization.Admin.addUser(orgId)
DELETE      /organizations/:orgId/admin/users/remove                          controllers.organization.Admin.removeUser(orgId)

GET         /organizations/:orgId/datasets/search                             controllers.organization.DataSets.listAsTokens(orgId, q: String ?= "")
GET         /organizations/:orgId/users/search                                controllers.Users.listAsTokens(orgId, q)

GET         /organizations/:orgId/groups                                      controllers.organization.Groups.list(orgId)
GET         /organizations/:orgId/groups/create                               controllers.organization.Groups.groups(orgId, groupId: org.bson.types.ObjectId = null)
GET         /organizations/:orgId/groups/update/:groupId                      controllers.organization.Groups.groups(orgId, groupId: org.bson.types.ObjectId)
POST        /organizations/:orgId/groups/update                               controllers.organization.Groups.update(orgId)
POST        /organizations/:orgId/groups/:groupId/addUser                     controllers.organization.Groups.addUser(orgId, groupId: org.bson.types.ObjectId)
DELETE      /organizations/:orgId/groups/:groupId/removeUser                  controllers.organization.Groups.removeUser(orgId, groupId: org.bson.types.ObjectId)
POST        /organizations/:orgId/groups/:groupId/addDataset                  controllers.organization.Groups.addDataset(orgId, groupId: org.bson.types.ObjectId)
DELETE      /organizations/:orgId/groups/:groupId/removeDataset               controllers.organization.Groups.removeDataset(orgId, groupId: org.bson.types.ObjectId)

#GET         /organizations/{orgId}/site/upload                               controllers.organization.CMS.upload
#POST        /organizations/{orgId}/site/upload/{uid}                         controllers.organization.CMS.uploadSubmit
#GET         /organizations/{orgId}/site/listImages                           controllers.organization.CMS.listImages
#GET         /organizations/{orgId}/site/?{language}?                         controllers.organization.CMS.list
#GET         /organizations/{orgId}/site/{language}/page/add                  controllers.organization.CMS.page
#GET         /organizations/{orgId}/site/{language}/page/{page}/update        controllers.organization.CMS.page
#POST        /organizations/{orgId}/site/page                                 controllers.organization.CMS.pageSubmit
#DELETE      /organizations/{orgId}/site/{language}/page/{key}                controllers.organization.CMS.pageDelete


GET          /organizations/:orgId/dataset                                   controllers.organization.DataSets.list(orgId)
#GET         /organizations/:orgId/dataset/add                               controllers.organization.DataSetControl.dataSet
#GET         /organizations/:orgId/dataset/{spec}/update                     controllers.organization.DataSetControl.dataSet
#POST        /organizations/:orgId/dataset/submit                            controllers.organization.DataSetControl.dataSetSubmit
GET          /organizations/:orgId/dataset/:spec                             controllers.organization.DataSets.dataset(orgId, spec)
#GET         /organizations/:orgId/dataset/load/:spec                        controllers.organization.DataSets.dataset(orgId, spec)
#POST        /organizations/:orgId/dataset/{spec}/index                      controllers.organization.DataSetControl.index
#POST        /organizations/:orgId/dataset/{spec}/reindex                    controllers.organization.DataSetControl.reIndex
#POST        /organizations/:orgId/dataset/{spec}/cancel                     controllers.organization.DataSetControl.cancel
#GET         /organizations/:orgId/dataset/{spec}/indexingStatus             controllers.organization.DataSetControl.indexingStatus
#GET         /organizations/:orgId/dataset/{spec}/state                      controllers.organization.DataSetControl.state
#POST        /organizations/:orgId/dataset/{spec}/disable                    controllers.organization.DataSetControl.disable
#POST        /organizations/:orgId/dataset/{spec}/enable                     controllers.organization.DataSetControl.enable
#DELETE      /organizations/:orgId/dataset/{spec}/remove                     controllers.organization.DataSetControl.delete
#POST        /organizations/:orgId/dataset/{spec}/invalidate                 controllers.organization.DataSetControl.invalidate
#POST        /organizations/:orgId/dataset/{spec}/forceUnlock                controllers.organization.DataSetControl.forceUnlock

#GET         /organizations/{orgId}/sip-creator/?                             organization.SipCreator.index

GET          /api/sip-creator/list                                            controllers.SipCreatorEndPoint.listAll(accessKey: Option[String] ?= None)
GET          /api/sip-creator/unlock/:orgId/:spec                             controllers.SipCreatorEndPoint.unlock(orgId, spec, accessKey: Option[String] ?= None)
POST         /api/sip-creator/submit/:orgId/:spec                             controllers.SipCreatorEndPoint.acceptFileList(orgId, spec, accessKey: Option[String] ?= None)
POST         /api/sip-creator/submit/:orgId/:spec/:fileName                   controllers.SipCreatorEndPoint.acceptFile(orgId, spec, fileName, accessKey: Option[String] ?= None)
GET          /api/sip-creator/fetch/:orgId/:spec-sip.zip                      controllers.SipCreatorEndPoint.fetchSIP(orgId, spec, accessKey: Option[String] ?= None)

# Hub Administration
#GET        /admin/themes                                                     admin.Themes.index
#GET        /admin/themes/load/{id}?                                          admin.Themes.load
#GET        /admin/themes/list                                                admin.Themes.list
#GET        /admin/themes/new                                                 admin.Themes.themeUpdate
#GET        /admin/themes/{id}/update                                         admin.Themes.themeUpdate
#POST       /admin/themes/submit                                              admin.Themes.themeSubmit
#GET        /admin/themes/reloadFromDisk                                      admin.Themes.reload
#GET        /admin/indexUGC                                                   admin.Admin.indexUGC
#GET        /admin/indexDataSets                                              admin.Admin.indexDataSets

#GET        /image/upload                                                     ImageUpload.upload
#POST       /image/upload                                                     ImageUpload.uploadFile


# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                           controllers.Assets.at(path="/public", file)